# =============================================================================
# BEHAVE CONFIGURATION
# =============================================================================
# FILE: .behaverc, behave.ini, setup.cfg, tox.ini
#
# For detail arguments description, also see:
#  * https://behave.readthedocs.io/en/stable/behave.html?highlight=logging#command-line-arguments
# =============================================================================

[behave]
# --------------------------------------
# important config for control
# --------------------------------------
#   Use keywords for a language other than English, such as: en, zh-CN...
#   for all supported language and keywords, also see:
#   * https://raw.githubusercontent.com/cucumber/cucumber/master/gherkin/gherkin-languages.json
#   * https://github.com/behave/behave/blob/master/behave/i18n.py
#   BE AWARE, Behave framework only can use the first keyword till now except English
lang = en
#   Specify default feature paths, used when none are provided, default for features
paths = tests/features
#   Stop running tests at the first failure.
stop = false
#   Display the summary at the end of the run.
summary = true
#   Define user-specific data for the config.userdata dictionary. Example: -D foo=bar to store it in config.userdata[foo].
# userdata_defines =
#   Invokes formatters without executing the steps.
# dry_run = false
# --------------------------------------


# --------------------------------------
# scenario and feature filter
# --------------------------------------
#   Only run feature files matching regular expression PATTERN.
# include_re = *
#   Dont run feature files matching regular expression PATTERN.
# exclude_re = *
#   Only execute certain features or scenarios based on the tag expression given.
#   such as:
#      --tags @foo,~@bar --tags @zap.
#   means: contains run (@foo or not @bar) and @zap,
#   Beware that if you want to use several negative tags to exclude several tags you have to use logical AND:
#      --tags ~@foo --tags ~@buggy.
# tags = @xxx
#   Defines the current test stage.
#   The test stage name is used as name prefix for the environment file and the steps directory (instead of default path names).
# stage =
#   Define default tags when non are provided. See tags for more information.
# default_tags = not (@xfail or @not_implemented)
#   Only run scenarios tagged with wip.
#   Additionally: use the plain formatter, do not capture stdout or logging output and stop at the first failure.
# wip = false
# --------------------------------------


# --------------------------------------
# configure for JUnit
# --------------------------------------
#   Output JUnit-compatible reports. When junit is enabled,
#   all stdout and stderr will be redirected and dumped to the junit report,
#   regardless of the capture and no-capture options.
junit = false
#   Directory in which to store JUnit reports.
junit_directory = build/behave.reports
# --------------------------------------


# --------------------------------------
# configure for running console
# --------------------------------------
#   Use ANSI color escapes. This is the default behaviour. This switch is used to override a configuration file setting.
color = true
#   Show the files and features loaded.
verbose = false
#   Specify name annotation schema for scenario outline (default={name}  @{row.id} {examples.name}).
# scenario_outline_annotation_schema = {name}  @{row.id} {examples.name}
#   Expand scenario outline tables in output.
# expand = true
#   Alias for no-snippets no-source.
# quiet = false
#   Print snippets for unimplemented steps. This is the default behaviour.
#   This switch is used to override a configuration file setting.
show_snippets = true
#   Print skipped steps. This is the default behaviour. This switch is used to override a configuration file setting.
show_skipped = false
#   Print the file and line of the step definition with the steps. This is the default behaviour.
#   This switch is used to override a configuration file setting.
show_source = false
#   Print multiline strings and tables under steps. This is the default behaviour.
#   This switch is used to override a configuration file setting.
show_multiline = true
#   Print the time taken, in seconds, of each step after the step has completed.
#   This is the default behaviour. This switch is used to override a configuration file setting.
show_timings = true
#   Show a catalog of all available step definitions. SAME AS: format=steps.catalog dry-run no-summary -q
steps_catalog = false
#   Capture stdout (any stdout output will be printed if there is a failure.)
#   This is the default behaviour. This switch is used to override a configuration file setting.
stdout_capture = false
#   Capture stderr (any stderr output will be printed if there is a failure.)
#   This is the default behaviour. This switch is used to override a configuration file setting.
stderr_capture = true
#   Specify default formatter (default: pretty).
default_format = pretty
#   Specify a formatter. If none is specified the default formatter is used.
#   Pass format help to get a list of available formatters.
format = rerun
    progress3
#   Write to specified file instead of stdout.
outfiles = rerun.txt
    build/behave.reports/report_progress3.txt
# --------------------------------------


# --------------------------------------
# configure for logging
# --------------------------------------
#   Capture logging. All logging during a step will be captured and displayed in the event of a failure.
#   This is the default behaviour. This switch is used to override a configuration file setting.
log_capture = true
#   Specify a level to capture logging at. The default is INFO - capturing everything.
logging_level = INFO
#   Specify custom format to print statements. Uses the same format as used by standard logging handlers.
#   The default is %(levelname)s:%(name)s:%(message)s.
logging_format = %(levelname)s:%(name)s:%(message)s
#   Specify custom date/time format to print statements. Uses the same format as used by standard logging handlers.
# logging_datefmt =
#   Specify which statements to filter in/out. By default, everything is captured. If the output is too verbose,
#   use this option to filter out needless output.
#   Example: logging_filter = foo will capture statements issued ONLY to foo or foo.what.ever.sub
#   but not foobar or other logger. Specify multiple loggers with comma: logging_filter = foo,bar,baz.
#   If any logger name is prefixed with a minus, eg logging_filter = -foo, it will be excluded rather than included.
# logging_filter =
#   Clear all other logging handlers.
# logging_clear_handlers = false
# --------------------------------------


# -- ALLURE-FORMATTER REQUIRES:
# brew install allure / scoop install allure (scoop not working, please download binary files from allure site)
# pip install allure-behave
# ALLURE_REPORTS_DIR=allure.reports
# behave -f allure -o $ALLURE_REPORTS_DIR ...
# allure serve $ALLURE_REPORTS_DIR
#
# SEE ALSO:
# * https://github.com/allure-framework/allure2
# * https://github.com/allure-framework/allure-python
[behave.formatters]
allure = allure_behave.formatter:AllureFormatter

# PREPARED:
#  [behave]
#  format = ... missing_steps ...
#  output = ... features/steps/missing_steps.py ...
#  [behave.formatters]
#  missing_steps = behave.contrib.formatter_missing_steps:MissingStepsFormatter
